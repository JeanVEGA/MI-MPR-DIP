// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain;

import cz.cvut.fit.mi_mpr_dip.admission.domain.Admission;
import cz.cvut.fit.mi_mpr_dip.admission.domain.AdmissionDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.Term;
import cz.cvut.fit.mi_mpr_dip.admission.domain.TermDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.TermRegistration;
import cz.cvut.fit.mi_mpr_dip.admission.domain.TermRegistrationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TermRegistrationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TermRegistrationDataOnDemand: @Component;
    
    private Random TermRegistrationDataOnDemand.rnd = new SecureRandom();
    
    private List<TermRegistration> TermRegistrationDataOnDemand.data;
    
    @Autowired
    private AdmissionDataOnDemand TermRegistrationDataOnDemand.admissionDataOnDemand;
    
    @Autowired
    private TermDataOnDemand TermRegistrationDataOnDemand.termDataOnDemand;
    
    public TermRegistration TermRegistrationDataOnDemand.getNewTransientTermRegistration(int index) {
        TermRegistration obj = new TermRegistration();
        setAdmission(obj, index);
        setAttended(obj, index);
        setTerm(obj, index);
        return obj;
    }
    
    public void TermRegistrationDataOnDemand.setAdmission(TermRegistration obj, int index) {
        Admission admission = admissionDataOnDemand.getRandomAdmission();
        obj.setAdmission(admission);
    }
    
    public void TermRegistrationDataOnDemand.setAttended(TermRegistration obj, int index) {
        Boolean attended = Boolean.TRUE;
        obj.setAttended(attended);
    }
    
    public void TermRegistrationDataOnDemand.setTerm(TermRegistration obj, int index) {
        Term term = termDataOnDemand.getRandomTerm();
        obj.setTerm(term);
    }
    
    public TermRegistration TermRegistrationDataOnDemand.getSpecificTermRegistration(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TermRegistration obj = data.get(index);
        Long id = obj.getTermRegistrationId();
        return TermRegistration.findTermRegistration(id);
    }
    
    public TermRegistration TermRegistrationDataOnDemand.getRandomTermRegistration() {
        init();
        TermRegistration obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getTermRegistrationId();
        return TermRegistration.findTermRegistration(id);
    }
    
    public boolean TermRegistrationDataOnDemand.modifyTermRegistration(TermRegistration obj) {
        return false;
    }
    
    public void TermRegistrationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TermRegistration.findTermRegistrationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TermRegistration' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TermRegistration>();
        for (int i = 0; i < 10; i++) {
            TermRegistration obj = getNewTransientTermRegistration(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
