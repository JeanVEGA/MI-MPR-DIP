<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"
		access-decision-manager-ref="accessDecisionManager" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter">
					<constructor-arg>
						<bean class="org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice" />
					</constructor-arg>
				</bean>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<property name="rolePrefix" value="${access.vote.role.prefix}" />
				</bean>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="admissionEndpoint" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.AdmissionEndpointImpl" />
	<bean id="mobileEndpoint" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.MobileEndpointImpl" />
	<bean id="programmeEndpoint" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.ProgrammeEndpointImpl" />
	<bean id="termEndpoint" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.TermEndpointImpl" />
	<bean id="userEndpoint" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.UserEndpointImpl" />

	<bean id="userIdentityEndpointHelper" class="cz.cvut.fit.mi_mpr_dip.admission.endpoint.helper.UserIdentityEndpointHelperImpl">
		<property name="securityContextHolderStrategy" ref="securityContextHolderStrategy" />
	</bean>

	<bean id="principalValidator" class="cz.cvut.fit.mi_mpr_dip.admission.validation.PrincipalValidator">
		<property name="securityContextHolderStrategy" ref="securityContextHolderStrategy" />
	</bean>

	<bean id="securityContextHolderStrategy" class="org.springframework.security.core.context.SecurityContextHolder"
		factory-method="getContextHolderStrategy" />

	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<security:filter-chain pattern="/services/mobile/identity"
					filters="sessionAuthenticationFilter,basicAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/processing/identity"
					filters="sessionAuthenticationFilter,basicAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/processing/**"
					filters="sessionAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/mobile/**"
					filters="sessionAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/user/**"
					filters="sessionAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/term"
					filters="sessionAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
				<security:filter-chain pattern="/services/term/**"
					filters="sessionAuthenticationFilter,anonymousAuthFilter,exceptionTranslationFilter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="anonymousAuthFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<constructor-arg>
			<value>${auth.anonymous.key}</value>
		</constructor-arg>
	</bean>

	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="authenticationManager" />
		<constructor-arg ref="authenticationEntryPoint" />
	</bean>

	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg>
			<bean class="org.springframework.security.web.authentication.AdmissionHttp403ForbiddenEntryPoint">
				<property name="errorPage" value="/error/403.jsp" />
			</bean>
		</constructor-arg>
		<property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</bean>

	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/error/403.jsp" />
	</bean>

	<security:authentication-manager>
		<security:authentication-provider ref="globalAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<constructor-arg>
			<list>
				<ref bean="userIdentityAuthenticationProvider" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.AdmissionBasicAuthenticationEntryPoint">
		<property name="realmName" value="${auth.basic.realm.name}" />
		<property name="errorPage" value="/error/401.jsp" />
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="${password.encoder.shaVariant}" />
	</bean>

	<bean id="passwordGenerator" class="cz.cvut.fit.mi_mpr_dip.admission.service.user.UserPasswordGenerator">
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="saltBeginning" value="${password.encoder.salt.beginning}" />
		<property name="saltEnd" value="${password.encoder.salt.end}" />
		<property name="plaintextBeginning" value="${password.encoder.plaintext.beginning}" />
		<property name="plaintextEnd" value="${password.encoder.plaintext.end}" />
		<property name="stringGenerator" ref="${generator.string}StringGenerator" />
	</bean>

	<util:constant id="LDAP" static-field="cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentityAuthentication.LDAP" />
	<util:constant id="PWD" static-field="cz.cvut.fit.mi_mpr_dip.admission.domain.user.UserIdentityAuthentication.PWD" />

	<bean id="userIdentityAuthenticationProvider" class="cz.cvut.fit.mi_mpr_dip.admission.authentication.UserIdentityAuthenticationProvider">
		<property name="authenticationServices">
			<map>
				<entry key-ref="LDAP" value-ref="ldapService" />
				<entry key-ref="PWD" value-ref="pwdService" />
			</map>
		</property>
	</bean>
</beans>
