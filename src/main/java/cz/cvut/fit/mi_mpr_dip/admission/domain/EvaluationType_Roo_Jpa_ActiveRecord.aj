// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect EvaluationType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager EvaluationType.entityManager;
    
    public static final EntityManager EvaluationType.entityManager() {
        EntityManager em = new EvaluationType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EvaluationType.countEvaluationTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EvaluationType o", Long.class).getSingleResult();
    }
    
    public static List<EvaluationType> EvaluationType.findAllEvaluationTypes() {
        return entityManager().createQuery("SELECT o FROM EvaluationType o", EvaluationType.class).getResultList();
    }
    
    public static EvaluationType EvaluationType.findEvaluationType(Long evaluationTypeId) {
        if (evaluationTypeId == null) return null;
        return entityManager().find(EvaluationType.class, evaluationTypeId);
    }
    
    public static List<EvaluationType> EvaluationType.findEvaluationTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EvaluationType o", EvaluationType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EvaluationType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EvaluationType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EvaluationType attached = EvaluationType.findEvaluationType(this.evaluationTypeId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EvaluationType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EvaluationType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EvaluationType EvaluationType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EvaluationType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
