// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect AppealType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager AppealType.entityManager;
    
    public static final EntityManager AppealType.entityManager() {
        EntityManager em = new AppealType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AppealType.countAppealTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AppealType o", Long.class).getSingleResult();
    }
    
    public static List<AppealType> AppealType.findAllAppealTypes() {
        return entityManager().createQuery("SELECT o FROM AppealType o", AppealType.class).getResultList();
    }
    
    public static AppealType AppealType.findAppealType(Long appealTypeId) {
        if (appealTypeId == null) return null;
        return entityManager().find(AppealType.class, appealTypeId);
    }
    
    public static List<AppealType> AppealType.findAppealTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AppealType o", AppealType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AppealType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AppealType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AppealType attached = AppealType.findAppealType(this.appealTypeId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AppealType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AppealType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AppealType AppealType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AppealType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
