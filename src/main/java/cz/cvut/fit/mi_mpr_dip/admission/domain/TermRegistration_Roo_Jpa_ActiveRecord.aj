// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect TermRegistration_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager TermRegistration.entityManager;
    
    public static final EntityManager TermRegistration.entityManager() {
        EntityManager em = new TermRegistration().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TermRegistration.countTermRegistrations() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TermRegistration o", Long.class).getSingleResult();
    }
    
    public static List<TermRegistration> TermRegistration.findAllTermRegistrations() {
        return entityManager().createQuery("SELECT o FROM TermRegistration o", TermRegistration.class).getResultList();
    }
    
    public static TermRegistration TermRegistration.findTermRegistration(Long termRegistrationId) {
        if (termRegistrationId == null) return null;
        return entityManager().find(TermRegistration.class, termRegistrationId);
    }
    
    public static List<TermRegistration> TermRegistration.findTermRegistrationEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TermRegistration o", TermRegistration.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void TermRegistration.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TermRegistration.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TermRegistration attached = TermRegistration.findTermRegistration(this.termRegistrationId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TermRegistration.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TermRegistration.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TermRegistration TermRegistration.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TermRegistration merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
