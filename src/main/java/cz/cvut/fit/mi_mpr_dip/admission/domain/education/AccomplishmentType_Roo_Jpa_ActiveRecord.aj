// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain.education;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect AccomplishmentType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager AccomplishmentType.entityManager;
    
    public static final EntityManager AccomplishmentType.entityManager() {
        EntityManager em = new AccomplishmentType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AccomplishmentType.countAccomplishmentTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AccomplishmentType o", Long.class).getSingleResult();
    }
    
    public static List<AccomplishmentType> AccomplishmentType.findAllAccomplishmentTypes() {
        return entityManager().createQuery("SELECT o FROM AccomplishmentType o", AccomplishmentType.class).getResultList();
    }
    
    public static AccomplishmentType AccomplishmentType.findAccomplishmentType(Long accomplishmentTypeId) {
        if (accomplishmentTypeId == null) return null;
        return entityManager().find(AccomplishmentType.class, accomplishmentTypeId);
    }
    
    public static List<AccomplishmentType> AccomplishmentType.findAccomplishmentTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AccomplishmentType o", AccomplishmentType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AccomplishmentType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AccomplishmentType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AccomplishmentType attached = AccomplishmentType.findAccomplishmentType(this.accomplishmentTypeId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AccomplishmentType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AccomplishmentType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AccomplishmentType AccomplishmentType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AccomplishmentType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
