// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain.education;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect Accomplishment_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Accomplishment.entityManager;
    
    public static final EntityManager Accomplishment.entityManager() {
        EntityManager em = new Accomplishment().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Accomplishment.countAccomplishments() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Accomplishment o", Long.class).getSingleResult();
    }
    
    public static List<Accomplishment> Accomplishment.findAllAccomplishments() {
        return entityManager().createQuery("SELECT o FROM Accomplishment o", Accomplishment.class).getResultList();
    }
    
    public static Accomplishment Accomplishment.findAccomplishment(Long accomplishmentId) {
        if (accomplishmentId == null) return null;
        return entityManager().find(Accomplishment.class, accomplishmentId);
    }
    
    public static List<Accomplishment> Accomplishment.findAccomplishmentEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Accomplishment o", Accomplishment.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Accomplishment.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Accomplishment.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Accomplishment attached = Accomplishment.findAccomplishment(this.accomplishmentId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Accomplishment.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Accomplishment.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Accomplishment Accomplishment.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Accomplishment merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
